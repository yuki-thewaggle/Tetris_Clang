#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>
//#include <conio.h>
#include "conio.h"  //for mac
#include <curses.h> //for mac

//関数のプロトタイプ宣言
void display(int, int);
bool isHit(int, int, int, int);
void resetMino();
void f_score(int, int *pvalue);
void gameOver(int *last_score);
void game();
//未実装な機能
//スタート画面
//LEVEL判定
//難易度
//GameOverからのループ
//Scoreの計算処理および、加算方法のバグを要修正
//
//定数定義
#define FILED_WIDTH 12
#define FILED_HEIGHT 22
#define MINO_WIDHT 4
#define MINO_HEIGHT 4
//グローバル変数
int minoType, minoAngle;
int minoX = 5, minoY = 0;
int score = 0;
char field[FILED_HEIGHT][FILED_WIDTH];
char displayBuffer[FILED_HEIGHT][FILED_WIDTH];
enum
{
    MINO_TYPE_I,
    MINO_TYPE_O,
    MINO_TYPE_S,
    MINO_TYPE_Z,
    MINO_TYPE_J,
    MINO_TYPE_L,
    MINO_TYPE_T,
    MINO_TYPE_MAX
};
enum
{
    MINO_ANGLE_0,
    MINO_ANGLE_90,
    MINO_ANGLE_180,
    MINO_ANGLE_270,
    MINO_ANGLE_MAX
};
char minoShapes[MINO_TYPE_MAX][MINO_ANGLE_MAX][MINO_HEIGHT][MINO_WIDHT] =
    {
        //MINO_TYPE_I
        {
            //MINO_ANGLE_0
            {
                0, 1, 0, 0,
                0, 1, 0, 0,
                0, 1, 0, 0,
                0, 1, 0, 0},
            //MINO_ANGLE_90
            {
                0, 0, 0, 0,
                0, 0, 0, 0,
                1, 1, 1, 1,
                0, 0, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 1, 0,
                0, 0, 1, 0,
                0, 0, 1, 0,
                0, 0, 1, 0},
            //MINO_ANGLE_270
            {
                0, 0, 0, 0,
                1, 1, 1, 1,
                0, 0, 0, 0,
                0, 0, 0, 0},
        },
        //MINO_TYPE_O
        {
            //MINO_ANGLE_0
            {
                0, 0, 0, 0,
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_90
            {
                0, 0, 0, 0,
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 0, 0,
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_270
            {
                0, 0, 0, 0,
                0, 1, 1, 0,
                0, 1, 1, 0,
                0, 0, 0, 0},
        },
        //MINO_TYPE_S
        {
            //MINO_ANGLE_0
            {
                0, 0, 0, 0,
                0, 0, 1, 1,
                0, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_90
            {
                0, 0, 1, 0,
                0, 0, 1, 1,
                0, 0, 0, 1,
                0, 0, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 1, 1,
                0, 1, 1, 0,
                0, 0, 0, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_270
            {
                0, 0, 1, 0,
                0, 1, 1, 0,
                0, 1, 0, 0,
                0, 0, 0, 0},
        },
        //MINO_TYPE_Z
        {
            //MINO_ANGLE_0
            {
                0, 0, 0, 0,
                1, 1, 0, 0,
                0, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_90
            {
                0, 1, 0, 0,
                1, 1, 0, 0,
                1, 0, 0, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 0, 0,
                1, 1, 0, 0,
                0, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_270
            {
                0, 0, 0, 0,
                0, 0, 1, 0,
                0, 1, 1, 0,
                0, 1, 0, 0},
        },
        //MINO_TYPE_J
        {
            //MINO_ANGLE_0
            {
                1, 0, 0, 0,
                1, 1, 1, 0,
                0, 0, 0, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_90
            {
                0, 0, 0, 0,
                0, 1, 0, 0,
                0, 1, 0, 0,
                1, 1, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 1, 1, 1,
                0, 0, 0, 1},
            //MINO_ANGLE_270
            {
                0, 0, 1, 1,
                0, 0, 1, 0,
                0, 0, 1, 0,
                0, 0, 0, 0},
        },
        //MINO_TYPE_L
        {
            //MINO_ANGLE_0
            {
                0, 0, 0, 1,
                0, 1, 1, 1,
                0, 0, 0, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_90
            {
                1, 1, 0, 0,
                0, 1, 0, 0,
                0, 1, 0, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 0, 0,
                0, 0, 0, 0,
                1, 1, 1, 0,
                1, 0, 0, 0},
            //MINO_ANGLE_270
            {
                0, 0, 0, 0,
                0, 0, 1, 0,
                0, 0, 1, 0,
                0, 0, 1, 1},
        },
        //MINO_TYPE_T
        {
            //MINO_ANGLE_0
            {
                0, 0, 0, 0,
                1, 1, 1, 0,
                0, 1, 0, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_90
            {
                0, 0, 0, 0,
                0, 1, 0, 0,
                0, 1, 1, 0,
                0, 1, 0, 0},
            //MINO_ANGLE_180
            {
                0, 0, 0, 0,
                0, 1, 0, 0,
                1, 1, 1, 0,
                0, 0, 0, 0},
            //MINO_ANGLE_270
            {
                0, 0, 0, 0,
                0, 0, 1, 0,
                0, 1, 1, 0,
                0, 0, 1, 0}}};
void display(int add_t, int add_total_score)
{
    int t = add_t;
    int total_score = add_total_score;
    memcpy(displayBuffer, field, sizeof(field));
    for (int i = 0; i < MINO_HEIGHT; i++)
        for (int j = 0; j < MINO_WIDHT; j++)
            displayBuffer[minoY + i][minoX + j] |= minoShapes[minoType][minoAngle][i][j];
    system("cls");
    printf("%02ld:", t / 60 % 60);
    printf("%02ld", t % 60);
    printf("　Total SCORE:%08ld\n", total_score);
    for (int i = 0; i < FILED_HEIGHT; i++)
    {
        for (int j = 0; j < FILED_WIDTH; j++)
            printf(displayBuffer[i][j] ? "■" : "　");
        printf("\n");
    }
}
bool isHit(int _minoX, int _minoY, int _minoType, int _minoAngle)
{
    for (int i = 0; i < MINO_HEIGHT; i++)
        for (int j = 0; j < MINO_WIDHT; j++)
            if (minoShapes[_minoType][_minoAngle][i][j] && field[_minoY + i][_minoX + j])
                return true;
    return false;
}
void resetMino()
{
    minoX = 5; //横軸真ん中辺りを指定
    minoY = 0; //出現位置をトップを指定
    minoType = rand() % MINO_TYPE_MAX;
    minoAngle = rand() % MINO_ANGLE_MAX;
}
void f_score(int add_lineFill, int *pvalue)
{
    int add_score = add_lineFill;
    switch (add_score)
    {
    case 1:
        *pvalue += 100;
        break;
    case 2:
        *pvalue += 200;
        break;
    case 3:
        *pvalue += 600;
        break;
    case 4:
        *pvalue += 800;
        break;
    }
    return;
}
void gameOver(int *last_score)
{
    system("cls");
    printf("Your Total Score:%08ld\n", *last_score);
    printf("Game Over\n");
    printf("Do you want to challenge again? \n Yes:Please Enter [y]\n No:Please Enter [n]\n");
    /* if (_kbhit()) {
    switch (_getch()) {
    case'y':
    printf("yes");
    break;
    case'n':
    printf("no");
    break;
    }
    }
    */
}
void game()
{
    memset(field, 0, sizeof(field));
    for (int i = 0; i < FILED_HEIGHT; i++)
        field[i][0] = field[i][FILED_WIDTH - 1] = 1;
    for (int i = 0; i < FILED_WIDTH; i++)
        field[FILED_HEIGHT - 1][i] = 1;
    resetMino();           //Mino初期化
    time_t t = time(NULL); //tに現在時刻を入力
    while (1)
    {
        //Key操作
        if (_kbhit())
        {
            switch (_getch())
            {
            case 's':
                if (!isHit(minoX, minoY + 1, minoType, minoAngle))
                    minoY++;
                break;
            case 'a':
                if (!isHit(minoX - 1, minoY, minoType, minoAngle))
                    minoX--;
                break;
            case 'd':
                if (!isHit(minoX + 1, minoY, minoType, minoAngle))
                    minoX++;
                break;
            case 0x20:
                if (!isHit(minoX, minoY, minoType, (minoAngle + 1) % MINO_ANGLE_MAX))
                    minoAngle = (minoAngle + 1) % MINO_ANGLE_MAX;
            }
            display(t, score);
        }
        //描画tの値が現在時刻と異なっていたら描画する（１秒ごとに更新）
        if (t != time(NULL))
        {
            t = time(NULL);
            if (isHit(minoX, minoY + 1, minoType, minoAngle))
            {
                for (int i = 0; i < MINO_HEIGHT; i++)
                    for (int j = 0; j < MINO_WIDHT; j++)
                        field[minoY + i][minoX + j] |= minoShapes[minoType][minoAngle][i][j];
                {
                    for (int i = 0; i < FILED_HEIGHT - 1; i++)
                    {
                        bool lineFill = true;
                        for (int j = 1; j < FILED_WIDTH - 1; j++)
                        {
                            if (!field[i][j])
                                lineFill = false;
                        }
                        if (lineFill)
                        {
                            int s = 0; //スコア判定用カウンタ
                            for (int j = i; 0 < j; j--)
                            {
                                memcpy(field[j], field[j - 1], FILED_WIDTH);
                                s = (FILED_HEIGHT - 1) - i; //下から何回消しているかを計算
                            }
                            f_score(s, &score);
                        }
                    }
                }
                resetMino();
            }
            else
                minoY++; //minoの位置に１加算
            if (!isHit(minoX, 0, minoType, minoAngle))
            {
                display(t, score); //描画
            }
            else
            {
                //gameOver(&score);
                break;
            }
        }
    }
}
int main()
{
    system("chcp 65001");
    game();
    gameOver(&score);
    _getch();

    return 0;
}